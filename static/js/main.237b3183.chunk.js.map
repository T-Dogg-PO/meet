{"version":3,"sources":["Event.js","EventList.js","Alert.js","CitySearch.js","NumberOfEvents.js","WelcomeScreen.jsx","EventGenre.js","mock-data.js","api.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetailsToggle","handleButtonClicked","setState","event","this","props","className","summary","start","dateTime","location","description","onClick","Component","EventList","events","map","id","Alert","getStyle","color","fontWeight","style","text","InfoAlert","ErrorAlert","WarningAlert","CitySearch","query","suggestions","showSuggestions","undefined","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","length","infoText","handleItemClicked","suggestion","updateEvents","type","onChange","onFocus","e","preventDefault","display","NumberOfEvents","eventsNumber","isNaN","errorText","updateNumber","onBlur","WelcomeScreen","showWelcomeScreen","align","class","src","alt","getAccessToken","rel","href","EventGenre","genres","colours","useEffect","setData","genre","split","includes","name","useState","data","ResponsiveContainer","height","PieChart","width","Legend","layout","verticalAlign","Pie","cx","cy","labelLine","outerRadius","dataKey","label","percent","toFixed","entry","index","Cell","fill","mockData","JSON","parse","stringify","extractLocations","Set","checkToken","accessToken","a","fetch","then","res","json","catch","error","result","getEvents","NProgress","window","startsWith","done","navigator","onLine","localStorage","getItem","token","removeQuery","url","axios","get","setItem","history","pushState","pathname","newurl","protocol","host","tokenCheck","removeItem","searchParams","URLSearchParams","search","code","results","authUrl","getToken","encodeCode","encodeURIComponent","access_token","App","numberOfEvents","currentLocation","slicedLocationEvents","slice","newNumberOfEvents","getData","number","city","console","log","mounted","isTokenValid","warningText","ScatterChart","margin","top","right","bottom","left","CartesianGrid","XAxis","YAxis","allowDecimals","Tooltip","cursor","strokeDasharray","Scatter","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","atatus","install","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","headers","response","contentType","status","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.237b3183.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Event extends Component {\r\n    state = {\r\n        showDetailsToggle: false\r\n    }\r\n\r\n    handleButtonClicked = () => {\r\n        this.setState({\r\n            showDetailsToggle: !this.state.showDetailsToggle\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { event } = this.props;\r\n\r\n        return (\r\n            <div className=\"event\">\r\n                <h1 className=\"event-name\">{event.summary}</h1>\r\n                <p className=\"start-time\">{event.start.dateTime}</p>\r\n                <p className=\"location\">{event.location}</p>\r\n\r\n                {this.state.showDetailsToggle ? \r\n                    <div className=\"about-event\">\r\n                        <h2>About Event:</h2>\r\n                        <p className=\"event-description\">{event.description}</p>\r\n                        <button className=\"toggle-details\" onClick={() => this.handleButtonClicked()} >Hide Event Details</button>\r\n                    </div>\r\n                    :\r\n                    <button className=\"toggle-details\" onClick={() => this.handleButtonClicked()} >Show Event Details</button>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Event;","import React, { Component } from 'react';\r\nimport Event from './Event';\r\n\r\nclass EventList extends Component {\r\n    render() {\r\n        const { events } = this.props;\r\n        return (\r\n            <ul className=\"EventList\">\r\n                {events.map(event => \r\n                    <li key={event.id}>\r\n                        <Event event={event} />\r\n                    </li>\r\n                )}\r\n            </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventList;","import React, { Component } from 'react';\r\n\r\n// Create an Alert component, which will be the base component that the other alert components will inherit from\r\nclass Alert extends Component {\r\n    // Inherit properties from Component, then define this.color\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = null;\r\n    }\r\n\r\n    // Define a getStyle function that will be called to define the colour of the alert\r\n    getStyle = () => {\r\n        return {\r\n            color: this.color,\r\n            fontWeight: 'bold',\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Alert\">\r\n                <p style={this.getStyle()}>{this.props.text}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Subclass that will define the colour for an info-alert\r\nclass InfoAlert extends Alert {\r\n    // Inherit from parent component (Alert), then override the color property\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = 'blue';\r\n    }\r\n}\r\n\r\n// Subclass that will define the colour for an error-alert\r\nclass ErrorAlert extends Alert {\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = 'red';\r\n    }\r\n}\r\n\r\n// Subclass that will define the colour for a warning-alert\r\nclass WarningAlert extends Alert {\r\n    constructor(props) {\r\n        super(props);\r\n        this.color = 'orange';\r\n    }\r\n}\r\n\r\nexport { InfoAlert, ErrorAlert, WarningAlert };","import React, { Component } from 'react';\r\nimport { InfoAlert } from './Alert';\r\n\r\nclass CitySearch extends Component {\r\n    state = {\r\n        query: '',\r\n        suggestions: [],\r\n        showSuggestions: undefined\r\n    }\r\n\r\n    // Function to update the state when the user types into the search box (query is what the user has typed into the search box, suggestions is the list of city suggestions)\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({showSuggestions:true});\r\n        const suggestions = this.props.locations.filter((location) => {\r\n            return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\r\n        });\r\n        // Check to see if any suggestions are returned. If not, display the InfoAlert\r\n        if (suggestions.length === 0) {\r\n            this.setState({\r\n                query: value,\r\n                infoText: 'We cannot find the city you are looking for. Please try another city.',\r\n                suggestions: []\r\n            });\r\n        } else {\r\n            return this.setState({\r\n                query: value,\r\n                suggestions,\r\n                infoText: ''\r\n            });\r\n        }\r\n    };\r\n\r\n    // Function to update the state when the user clicks on a search suggestion\r\n    handleItemClicked = (suggestion) => {\r\n        this.setState({\r\n            query: suggestion,\r\n            suggestions: [],\r\n            showSuggestions: false,\r\n            infoText: ''\r\n        });\r\n\r\n        this.props.updateEvents(suggestion);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"CitySearch\">\r\n                <InfoAlert text={this.state.infoText} />\r\n                <input \r\n                type=\"text\" \r\n                className=\"city\" \r\n                value={this.state.query} \r\n                onChange={this.handleInputChanged} \r\n                onFocus={(e) => {\r\n                    e.preventDefault();\r\n                    this.setState({ showSuggestions: true });\r\n                }}\r\n                />\r\n                <ul className=\"suggestions\" style={this.state.showSuggestions ? {} : { display: 'none' }} >\r\n                    {this.state.suggestions.map((suggestion) => (\r\n                        <li key={suggestion} onClick={() => this.handleItemClicked(suggestion)}>{suggestion}</li>\r\n                    ))}\r\n                    <li key='all' onClick={() => this.handleItemClicked(\"all\")}>\r\n                        <b>See all cities</b>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CitySearch;","import React, { Component } from \"react\";\r\nimport { ErrorAlert } from './Alert';\r\n\r\nclass NumberOfEvents extends Component {\r\n    state = {\r\n        eventsNumber: 32\r\n    }\r\n\r\n    // Function to update the state when there is a change to the number input. This also runs a function from the props (App.js) that will change the number of events showing on the screen\r\n    handleInputChanged = (event) => {\r\n        const value = event.target.value;\r\n        if (value < 1 || value > 32 || isNaN(value)) {\r\n            this.setState({\r\n                errorText: 'Select a number from 1 to 32',\r\n                eventsNumber: value\r\n            });\r\n        } else {\r\n            this.setState({\r\n                eventsNumber: value,\r\n                errorText: ''\r\n            });\r\n            this.props.updateNumber(value);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"numberOfEvents\">\r\n                <input \r\n                type=\"text\" \r\n                className=\"events-number-input\" \r\n                value={this.state.eventsNumber} \r\n                onChange={this.handleInputChanged} \r\n                onBlur={(e) => {\r\n                    e.preventDefault();\r\n                    this.setState({errorText: ''});\r\n                }} />\r\n                <ErrorAlert text={this.state.errorText} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NumberOfEvents;","import   React   from   \"react\";   \r\nimport   './WelcomeScreen.css';   \r\n \r\nfunction   WelcomeScreen(props)   {   \r\n   return   props.showWelcomeScreen   ?   \r\n     (   \r\n       <div   className=\"WelcomeScreen\">   \r\n         <h1>Welcome   to   the   Meet   app</h1>   \r\n         <h4>   \r\n           Log   in   to   see   upcoming   events   around   the   world   for   \r\n           full-stack   \r\n           developers   \r\n       </h4>   \r\n         <div   className=\"button_cont\"   align=\"center\">   \r\n           <div   class=\"google-btn\">   \r\n             <div   class=\"google-icon-wrapper\">   \r\n               <img   \r\n                 class=\"google-icon\" src=\"https://upload.wikimedia.org/wikipedia/commons/5/53/Google_%22G%22_Logo.svg\" alt=\"Google   sign-in\"   \r\n               />   \r\n             </div>   \r\n             <button   onClick={()   =>   {   props.getAccessToken()   }}   \r\n               rel=\"nofollow noopener\"   \r\n               class=\"btn-text\"   \r\n             >   \r\n               <b>Sign in with google</b>   \r\n             </button>    \r\n           </div>   \r\n         </div>   \r\n         <a   \r\n           href=\"https://YOUR_GITHUB_USERNAME.github.io/meet/privacy.html\"   \r\n           rel=\"nofollow   noopener\"   \r\n         >   \r\n        Privacy   policy   \r\n     </a>   \r\n    </div>   \r\n    )   \r\n    : null   \r\n}\r\n\r\nexport default WelcomeScreen;","import React, { useEffect, useState } from 'react';\r\nimport { PieChart, Pie, Cell, ResponsiveContainer, Legend } from 'recharts';\r\n\r\n\r\nconst EventGenre = ({ events }) => {\r\n    // Manually set the genres and colours that we will use in the Pie Chart\r\n    const genres = ['React', 'JavaScript', 'Node', 'jQuery', 'AngularJS'];\r\n    const colours = ['#0047AB', '#58508d', '#bc5090', '#ff6361', '#ffa600'];\r\n\r\n    // Function to get the data that we will include in the Pie Chart\r\n    const getData = () => {\r\n        const data = genres.map((genre) => {\r\n            const value = events.filter((event) =>\r\n                event.summary.split(' ').includes(genre)).length;\r\n\r\n                return { name: genre, value };\r\n        });\r\n        return data;\r\n    }\r\n\r\n    // useEffect will listen to changes to the events prop and then set the state\r\n    useEffect(() => {\r\n        setData(() => getData());\r\n    }, [events]);\r\n\r\n    // useState will set the state when there are events\r\n    const [data, setData] = useState([]);\r\n\r\n    return (\r\n        <ResponsiveContainer height={400} >\r\n          <PieChart width={400} height={400} >\r\n            <Legend layout=\"vertical\" verticalAlign=\"bottom\" />\r\n            <Pie\r\n              data={data}\r\n              cx={200}\r\n              cy={200}\r\n              labelLine={false}\r\n              outerRadius={80}\r\n              dataKey=\"value\"\r\n              label={({ name, percent }) => {\r\n                if (percent < 0.05) {\r\n                  return ``\r\n                } else {\r\n                  return `${name} ${(percent * 100).toFixed(0)}%`\r\n                }\r\n                }\r\n              }\r\n            >\r\n              {data.map((entry, index) => (\r\n                  <Cell key={`cell-${index}`} fill={colours[index]}/>\r\n                ))}\r\n            </Pie>\r\n          </PieChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n\r\nexport default EventGenre;\r\n","let mockData = [\r\n    {\r\n        \"kind\": \"calendar#event\",\r\n        \"etag\": \"\\\"3181161784712000\\\"\",\r\n        \"id\": \"4eahs9ghkhrvkld72hogu9ph3e_20200519T140000Z\",\r\n        \"status\": \"confirmed\",\r\n        \"htmlLink\": \"https://www.google.com/calendar/event?eid=NGVhaHM5Z2hraHJ2a2xkNzJob2d1OXBoM2VfMjAyMDA1MTlUMTQwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n        \"created\": \"2020-05-19T19:17:46.000Z\",\r\n        \"updated\": \"2020-05-27T12:01:32.356Z\",\r\n        \"summary\": \"Learn JavaScript\",\r\n        \"description\": \"Have you wondered how you can ask Google to show you the list of the top ten must-see places in London? And how Google presents you the list? How can you submit the details of an application? Well, JavaScript is doing these. :) \\n\\nJavascript offers interactivity to a dull, static website. Come, learn JavaScript with us and make those beautiful websites.\",\r\n        \"location\": \"London, UK\",\r\n        \"creator\": {\r\n         \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n         \"self\": true\r\n        },\r\n        \"organizer\": {\r\n         \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n         \"self\": true\r\n        },\r\n        \"start\": {\r\n         \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n         \"timeZone\": \"Europe/Berlin\"\r\n        },\r\n        \"end\": {\r\n         \"dateTime\": \"2020-05-19T17:00:00+02:00\",\r\n         \"timeZone\": \"Europe/Berlin\"\r\n        },\r\n        \"recurringEventId\": \"4eahs9ghkhrvkld72hogu9ph3e\",\r\n        \"originalStartTime\": {\r\n         \"dateTime\": \"2020-05-19T16:00:00+02:00\",\r\n         \"timeZone\": \"Europe/Berlin\"\r\n        },\r\n        \"iCalUID\": \"4eahs9ghkhrvkld72hogu9ph3e@google.com\",\r\n        \"sequence\": 0,\r\n        \"reminders\": {\r\n         \"useDefault\": true\r\n        },\r\n        \"eventType\": \"default\"\r\n    },\r\n    {\r\n        \"kind\": \"calendar#event\",\r\n        \"etag\": \"\\\"3181159875584000\\\"\",\r\n        \"id\": \"3qtd6uscq4tsi6gc7nmmtpqlct_20200520T120000Z\",\r\n        \"status\": \"confirmed\",\r\n        \"htmlLink\": \"https://www.google.com/calendar/event?eid=M3F0ZDZ1c2NxNHRzaTZnYzdubW10cHFsY3RfMjAyMDA1MjBUMTIwMDAwWiBmdWxsc3RhY2t3ZWJkZXZAY2FyZWVyZm91bmRyeS5jb20\",\r\n        \"created\": \"2020-05-19T19:14:30.000Z\",\r\n        \"updated\": \"2020-05-27T11:45:37.792Z\",\r\n        \"summary\": \"React is Fun\",\r\n        \"description\": \"Love HTML, CSS, and JS? Want to become a cool front-end developer? \\n\\nReact is one of the most popular front-end frameworks. There is a huge number of job openings for React developers in most cities. \\n\\nJoin us in our free React training sessions and give your career a new direction. \",\r\n        \"location\": \"Berlin, Germany\",\r\n        \"creator\": {\r\n         \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n         \"self\": true\r\n        },\r\n        \"organizer\": {\r\n         \"email\": \"fullstackwebdev@careerfoundry.com\",\r\n         \"self\": true\r\n        },\r\n        \"start\": {\r\n         \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n         \"timeZone\": \"Europe/Berlin\"\r\n        },\r\n        \"end\": {\r\n         \"dateTime\": \"2020-05-20T15:00:00+02:00\",\r\n         \"timeZone\": \"Europe/Berlin\"\r\n        },\r\n        \"recurringEventId\": \"3qtd6uscq4tsi6gc7nmmtpqlct\",\r\n        \"originalStartTime\": {\r\n         \"dateTime\": \"2020-05-20T14:00:00+02:00\",\r\n         \"timeZone\": \"Europe/Berlin\"\r\n        },\r\n        \"iCalUID\": \"3qtd6uscq4tsi6gc7nmmtpqlct@google.com\",\r\n        \"sequence\": 0,\r\n        \"reminders\": {\r\n         \"useDefault\": true\r\n        },\r\n        \"eventType\": \"default\"\r\n    },\r\n];\r\n\r\n// Convert the JSON to JavaScript to conform with JavaScript best practices\r\nmockData = JSON.parse(JSON.stringify(mockData));\r\n\r\nexport { mockData };","import { mockData } from './mock-data';\r\nimport axios from 'axios';\r\nimport NProgress from 'nprogress';\r\n\r\n// This function takes an events array, then uses map to create a new array with only locations\r\n// It will also remove all duplicates by creating another new array using the spread opearator and spreading a new Set\r\nexport const extractLocations = (events) => {\r\n    var extractLocations = events.map((event) => event.location);\r\n    var locations = [...new Set(extractLocations)];\r\n    return locations;\r\n};\r\n\r\n// Function to check an accessToken's validity\r\nexport const checkToken = async (accessToken) => {\r\n    const result = await fetch(\r\n        `https://www.googleapis.com/oauth2/v1/tokeninfo?access_token=${accessToken}`\r\n    ).then((res) => res.json())\r\n    .catch((error) => error.json());\r\n\r\n    return result;\r\n}\r\n\r\n// async function to get all events from the API asynchronously\r\nexport const getEvents = async () => {\r\n    // NProgress is a Node package used to display progress bars at the top of the page\r\n    NProgress.start();\r\n    // Use mockData if running locally\r\n    if (window.location.href.startsWith('http://localhost')) {\r\n        NProgress.done();\r\n        return mockData;\r\n    }\r\n\r\n    if (!navigator.onLine) {\r\n        const events = localStorage.getItem(\"lastEvents\");\r\n        NProgress.done();\r\n        return events ? JSON.parse(events).events : [];\r\n    }\r\n\r\n    const token = await getAccessToken();\r\n\r\n    if (token) {\r\n        // removeQuery() will remove the code from the URL once we're done with it\r\n        removeQuery();\r\n        const url = 'https://85s6317vx8.execute-api.eu-central-1.amazonaws.com/dev/api/get-events' + '/' + token;\r\n        const result = await axios.get(url);\r\n        if (result.data) {\r\n            var locations = extractLocations(result.data.events);\r\n            localStorage.setItem(\"lastEvents\", JSON.stringify(result.data));\r\n            localStorage.setItem(\"locations\", JSON.stringify(locations));\r\n        }\r\n        NProgress.done();\r\n        return result.data.events;\r\n    }\r\n};\r\n\r\n// Function checks if there's a path, then builds the URL with or without the current path\r\nconst removeQuery = () => {\r\n    if (window.history.pushState && window.location.pathname) {\r\n        var newurl = \r\n            window.location.protocol + \r\n            \"//\" +\r\n            window.location.host +\r\n            window.location.pathname;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    } else {\r\n        newurl = window.location.protocol + \"//\" + window.location.host;\r\n        window.history.pushState(\"\", \"\", newurl);\r\n    }\r\n};\r\n\r\n// Function to get the access_token to access the API\r\nexport const getAccessToken = async () => {\r\n    // Check localStorage to see if they already have a token\r\n    const accessToken = localStorage.getItem('access_token');\r\n\r\n    // If no locally stored accessToken, redirect to Google Authorization\r\n    const tokenCheck = accessToken && (await checkToken(accessToken));\r\n\r\n    if (!accessToken || tokenCheck.error) {\r\n        await localStorage.removeItem('access_token');\r\n        const searchParams = new URLSearchParams(window.location.search);\r\n        const code = await searchParams.get('code');\r\n        // Check for authorization code. If no, redirect to Google Authoroization screen\r\n        if (!code) {\r\n            const results = await axios.get(\r\n                \"https://85s6317vx8.execute-api.eu-central-1.amazonaws.com/dev/api/get-auth-url\"\r\n            );\r\n            const { authUrl } = results.data;\r\n            return (window.location.href = authUrl);\r\n        }\r\n        return code && getToken(code);\r\n    }\r\n    return accessToken;\r\n};\r\n\r\n// Function to get the access token from AWS\r\nconst getToken = async (code) => {\r\n    const encodeCode = encodeURIComponent(code);\r\n    const { access_token } = await fetch('https://85s6317vx8.execute-api.eu-central-1.amazonaws.com/dev/api/token' + '/' + encodeCode)\r\n        .then((res) => {\r\n            return res.json();\r\n        }).catch((error) => error);\r\n    \r\n    access_token && localStorage.setItem(\"access_token\", access_token);\r\n\r\n    return access_token;\r\n};","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport EventList from './EventList';\r\nimport CitySearch from './CitySearch';\r\nimport NumberOfEvents from './NumberOfEvents';\r\nimport WelcomeScreen from './WelcomeScreen';\r\nimport EventGenre from './EventGenre';\r\n\r\nimport { getEvents, extractLocations, checkToken, getAccessToken } from './api';\r\n\r\nimport { ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts';\r\n\r\nimport './nprogress.css';\r\nimport { WarningAlert } from './Alert';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    events: [],\r\n    locations: [],\r\n    numberOfEvents: 32,\r\n    currentLocation: 'all',\r\n    showWelcomeScreen: undefined\r\n  }\r\n\r\n  // Part of loading events when the app loads. componentDidMount will make an API call and save the initial data to state\r\n  async componentDidMount() {\r\n    // Use this boolean to only update the state if this.mounted is true\r\n    this.mounted = true;\r\n    const accessToken = localStorage.getItem('access_token');\r\n    const isTokenValid = (await checkToken(accessToken)).error ? false : true;\r\n    const searchParams = new URLSearchParams(window.location.search);\r\n    const code = searchParams.get(\"code\");\r\n    // Show the welcome screen if either the code or the Access Token returns an error\r\n    this.setState({\r\n      showWelcomeScreen: !(code || isTokenValid)\r\n    });\r\n    if ((code || isTokenValid) && this.mounted) {\r\n      getEvents().then((events) => {\r\n        // Set the events and locations based on what's been input in the appropriate input fields\r\n        if (this.mounted) {\r\n          this.setState({ events: events.slice(0, this.state.numberOfEvents), locations: extractLocations(events) });\r\n        }\r\n        // Display the warning message if the user is offline\r\n        if (!navigator.onLine) {\r\n          this.setState({\r\n            warningText: \"You are currently in Offline Mode. Events may not be up to date. Please reconnect to the internet for an updated list of events.\"\r\n          });\r\n        } else {\r\n          this.setState({\r\n            warningText: \"\"\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Set this.mounted to false when the component is unmounted so that the state doesn't get updated\r\n  componentWillUnmount(){\r\n    this.mounted = false;\r\n  }\r\n\r\n  // Function for updating the events state when a city is selected\r\n  updateEvents = (location) => {\r\n    getEvents().then((events) => {\r\n      const locationEvents = (location === 'all') ? events : events.filter((event) => event.location === location);\r\n      const slicedLocationEvents = locationEvents.slice(0, this.state.numberOfEvents);\r\n      this.setState({\r\n        events: slicedLocationEvents,\r\n        currentLocation: location\r\n      });\r\n    });\r\n  }\r\n\r\n  // Function to update the number of events displaying on the page when the user inputs a new number\r\n  updateNumber = (newNumberOfEvents) => {\r\n    this.setState({\r\n      numberOfEvents: newNumberOfEvents\r\n    });\r\n    this.updateEvents(this.state.currentLocation);\r\n  }\r\n\r\n  // Function to get the data for the ScatterChart\r\n  getData = () => {\r\n    const {locations, events} = this.state;\r\n    const data = locations.map((location) => {\r\n      const number = events.filter((event) => event.location === location).length;\r\n      const city = location.split(',')[0];\r\n      console.log(location, city)\r\n      return {city, number};\r\n    });\r\n    return data;\r\n  };\r\n\r\n  render() {\r\n    // If showWelcomeScreen is undefined (which it should be on initial load) then display an empty div until the component has been mounted and the state can be updated\r\n    if (this.state.showWelcomeScreen === undefined) return <div className=\"App\" />\r\n\r\n    const { locations, numberOfEvents, events } = this.state;\r\n    console.log('This is the getData function', this.getData())\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Meet App</h1>\r\n        <WarningAlert text={this.state.warningText} />\r\n        <h4>Choose your city</h4>\r\n        <CitySearch locations={locations} updateEvents={this.updateEvents} />\r\n        <h4>Select the number of events to show on screen</h4>\r\n        <NumberOfEvents updateNumber={this.updateNumber} numberOfEvents={numberOfEvents} />\r\n\r\n        <div className=\"data-vis-wrapper\">\r\n          <EventGenre events={events} />\r\n\r\n          <ResponsiveContainer height={400} >\r\n            <ScatterChart margin={{ top: 20, right: 20, bottom: 10, left: 10 }}>\r\n              <CartesianGrid />\r\n              <XAxis type=\"category\" dataKey=\"city\" name=\"City\" />\r\n              <YAxis type=\"number\" dataKey=\"number\" name=\"Number of Events\" allowDecimals={false} />\r\n              <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n              <Scatter data={this.getData()} fill=\"#8884d8\" />\r\n            </ScatterChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n        \r\n        <EventList events={this.state.events} />\r\n\r\n        <WelcomeScreen showWelcomeScreen={this.state.showWelcomeScreen} getAccessToken={() => { getAccessToken() }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport * as atatus from 'atatus-spa';\r\natatus.config('b2c651e8dea94ff6bb1802bf2fc48fe0').install();\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"sourceRoot":""}